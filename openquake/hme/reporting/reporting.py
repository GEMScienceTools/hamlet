"""
Functionality for writing reports demonstrating the results of the Hamlet
testing.
"""

import os
import logging
from typing import Optional
from xml.parsers.expat import model

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from geopandas import GeoDataFrame
from jinja2 import Environment, FileSystemLoader

from openquake.hme.utils.plots import (
    plot_likelihood_map,
    plot_S_test_map,
    plot_over_under_map,
    plot_mfd,
    plot_rup_match_mag_dist,
    plot_rup_match_map,
    plot_N_test_results,
    plot_L_test_results,
)

BASE_DATA_PATH = os.path.dirname(__file__)
template_dir = os.path.join(BASE_DATA_PATH, "templates")


def _init_env() -> Environment:
    file_loader = FileSystemLoader(template_dir)
    env = Environment(loader=file_loader)
    return env


def generate_basic_report(
    cfg: dict,
    results: dict,
    input_data: dict,
) -> None:
    """
    Generates an HTML report with the results of the various evaluations or
    tests performed by Hamlet.

    :param cfg:
        Configuration from parsed yaml file.

    :type cfg:
        `dict`

    :param results:
        Results of the model evaluations. Should be auto-generated by Hamlet.

    :type results:
        `dict`

    :param bin_gdf:
        All of the :class:`~openquake.hme.utils.bins.SpacemagBin` s used in the
        evaluations.

    :type bin_gdf:
        `geopandas.GeoDataFrame`

    :param eq_gdf:
        Observed earthquakes used in the evaluations.

    :type eq_gdf:
        `geopandas.GeoDataFrame`

    """

    env = _init_env()
    report_template = env.get_template("basic_report.html")

    render_result_text(
        env=env, cfg=cfg, results=results, input_data=input_data
    )

    report = report_template.render(cfg=cfg, results=results)

    with open(cfg["report"]["basic"]["outfile"], "w") as report_file:
        report_file.write(report)


def render_result_text(
    env: Environment,
    cfg: dict,
    results: dict,
    input_data: dict,
) -> None:

    if "gem" in results.keys():
        if "model_mfd" in results["gem"].keys():
            render_mfd_eval(env=env, cfg=cfg, results=results)

        # will remove likelhood eval
        # if "likelihood" in results["gem"].keys():
        #    render_likelihood(
        #        env=env,
        #        cfg=cfg,
        #        results=results,
        #        bin_gdf=bin_gdf,
        #        eq_gdf=eq_gdf,
        #    )

        if "moment_over_under" in results["gem"].keys():
            render_moment_over_under(
                env=env, cfg=cfg, results=results, cell_gdf=results["cell_gdf"]
            )

        if "max_mag_check" in results["gem"].keys():
            render_max_mag(env=env, cfg=cfg, results=results)

        if "N_test" in results["gem"].keys():
            render_N_test(
                env=env, cfg=cfg, results=results, model_test_framework="gem"
            )

        if "M_test" in results["gem"].keys():
            render_M_test(
                env=env, cfg=cfg, results=results, model_test_framework="gem"
            )

        if "S_test" in results["gem"].keys():
            render_S_test(
                env=env,
                cfg=cfg,
                results=results,
                cell_gdf=results["cell_gdf"],
                model_test_framework="gem",
            )

        if "L_test" in results["gem"].keys():
            render_L_test(
                env=env, cfg=cfg, results=results, model_test_framework="gem"
            )

        if "rupture_matching_eval" in results["gem"].keys():
            render_rupture_matching_eval(
                env=env, cfg=cfg, input_data=input_data, results=results
            )

    if "relm" in results.keys():
        if "N_test" in results["relm"].keys():
            render_N_test(
                env=env, cfg=cfg, results=results, model_test_framework="relm"
            )

        if "M_test" in results["relm"].keys():
            render_M_test(
                env=env, cfg=cfg, results=results, model_test_framework="relm"
            )

        if "S_test" in results["relm"].keys():
            render_S_test(
                env=env,
                cfg=cfg,
                results=results,
                cell_gdf=results["cell_gdf"],
                model_test_framework="relm",
            )

    if "sanity" in results.keys():
        raise NotImplementedError("Reporting for sanity not implemented.")

    if "model_description" in results.keys():
        if "describe_model" in results["model_description"].keys():
            logging.warn("describe_model reporting not implemented.")


def render_N_test(
    env: Environment, cfg: dict, results: dict, model_test_framework="gem"
):

    n_test_plot_str = plot_N_test_results(
        results[model_test_framework]["N_test"]["val"],
        return_string=True,
    )

    n_test = env.get_template("n_test.html")
    results[model_test_framework]["N_test"]["rendered_text"] = n_test.render(
        res=results[model_test_framework]["N_test"]["val"],
        mtf=model_test_framework,
        n_test_plot_str=n_test_plot_str,
    )


def render_L_test(
    env: Environment, cfg: dict, results: dict, model_test_framework="gem"
):

    l_test_plot_str = plot_L_test_results(
        results[model_test_framework]["L_test"]["val"],
        return_string=True,
    )

    l_test = env.get_template("l_test.html")
    results[model_test_framework]["L_test"]["rendered_text"] = l_test.render(
        res=results[model_test_framework]["L_test"]["val"],
        mtf=model_test_framework,
        l_test_plot_str=l_test_plot_str,
    )


def render_likelihood(
    env: Environment,
    cfg: dict,
    results: dict,
    bin_gdf: GeoDataFrame,
    eq_gdf: Optional[GeoDataFrame] = None,
) -> None:

    # total_log_like = np.sum(bin_gdf["log_like"]) / bin_gdf.shape[0]
    tot_like = results["gem"]["likelihood"]["val"].pop("total_log_likelihood")
    total_log_like = "{0:2f}".format(tot_like)

    likelihood_table = (
        pd.Series(results["gem"]["likelihood"]["val"], name="log_likelihood")
        .to_frame()
        .to_html()
    )

    if "plot_eqs" in cfg["report"]["basic"].keys():
        plot_eqs = cfg["report"]["basic"]["plot_eqs"]
    else:
        plot_eqs = False

    if "map_epsg" in cfg["report"]["basic"].keys():
        map_epsg = cfg["report"]["basic"]["map_epsg"]
    else:
        map_epsg = None

    likelihood_map_str = plot_likelihood_map(
        bin_gdf, plot_eqs=plot_eqs, eq_gdf=eq_gdf, map_epsg=map_epsg
    )

    likelihood_template = env.get_template("likelihood.html")

    results["gem"]["likelihood"]["rendered_text"] = likelihood_template.render(
        cfg=cfg,
        results=results,
        likelihood_table=likelihood_table,
        total_log_like=total_log_like,
        likelihood_map_str=likelihood_map_str,
    )


def render_max_mag(env: Environment, cfg: dict, results: dict) -> None:

    if results["gem"]["max_mag_check"]["val"]["test_pass"]:
        max_mag_results = (
            "PASS: All bins produce seismicity greater than observed."
        )
    else:
        max_mag_results = "Bins {} have higher observed seismicity than they can produce.".format(
            results["gem"]["max_mag_check"]["val"]["bad_bins"]
        )

    max_mag_template = env.get_template("max_mag_check.html")
    results["gem"]["max_mag_check"]["rendered_text"] = max_mag_template.render(
        max_mag_results=max_mag_results
    )


def render_M_test(
    env: Environment, cfg: dict, results: dict, model_test_framework="gem"
) -> None:
    m_test = env.get_template("m_test.html")
    results[model_test_framework]["M_test"]["rendered_text"] = m_test.render(
        mtf=model_test_framework,
        res=results[model_test_framework]["M_test"]["val"],
    )


def render_gem_M_test(env: Environment, cfg: dict, results: dict) -> None:
    n_test = env.get_template("gem_m_test.html")
    results["gem"]["M_test"]["rendered_text"] = n_test.render(
        res=results["gem"]["M_test"]["val"]
    )


def render_S_test(
    env: Environment,
    cfg: dict,
    results: dict,
    cell_gdf: GeoDataFrame,
    model_test_framework: str = "gem",
) -> None:

    s_test = env.get_template("s_test.html")

    test_config = cfg["config"]["model_framework"][model_test_framework][
        "S_test"
    ]

    if "map_epsg" in cfg["report"]["basic"].keys():
        map_epsg = cfg["report"]["basic"]["map_epsg"]
    else:
        map_epsg = None

    S_test_map_str = plot_S_test_map(
        cell_gdf,
        map_epsg=map_epsg,
        bad_bins=results[model_test_framework]["S_test"]["val"]["bad_bins"],
        model_test_framework=model_test_framework,
    )

    results[model_test_framework]["S_test"]["rendered_text"] = s_test.render(
        mtf=model_test_framework,
        res=results[model_test_framework]["S_test"]["val"],
        S_test_map_str=S_test_map_str,
    )


def render_gem_S_test(
    env: Environment,
    cfg: dict,
    results: dict,
    bin_gdf: GeoDataFrame,
) -> None:

    s_test = env.get_template("gem_s_test.html")

    test_config = cfg["config"]["model_framework"]["gem"]["S_test"]

    if "map_epsg" in cfg["report"]["basic"].keys():
        map_epsg = cfg["report"]["basic"]["map_epsg"]
    else:
        map_epsg = None
    if "append" in test_config.keys():
        if test_config["append"] is True:
            S_test_map_str = plot_S_test_map(
                bin_gdf,
                map_epsg=map_epsg,
                bad_bins=results["gem"]["S_test"]["val"]["bad_bins"],
            )
        else:
            S_test_map_str = ""

    results["gem"]["S_test"]["rendered_text"] = s_test.render(
        res=results["gem"]["S_test"]["val"], S_test_map_str=S_test_map_str
    )


def render_moment_over_under(
    env: Environment,
    cfg: dict,
    results: dict,
    cell_gdf: GeoDataFrame,
) -> None:

    over_under = env.get_template("moment_over_under.html")
    # test_config = cfg["config"]["model_framework"]["gem"]["moment_over_under"]

    if "map_epsg" in cfg["report"]["basic"].keys():
        map_epsg = cfg["report"]["basic"]["map_epsg"]
    else:
        map_epsg = None

    over_under_map_str = plot_over_under_map(cell_gdf, map_epsg)

    results["gem"]["moment_over_under"]["rendered_text"] = over_under.render(
        res=results["gem"]["moment_over_under"]["val"]["test_data"],
        over_under_map_str=over_under_map_str,
    )


def render_rupture_matching_eval(
    env: Environment, cfg: dict, input_data: dict, results: dict
) -> None:

    if "map_epsg" in cfg["report"]["basic"].keys():
        map_epsg = cfg["report"]["basic"]["map_epsg"]
    else:
        map_epsg = None

    rup_match_env = env.get_template("rupture_matching_eval.html")

    rup_match_results = results["gem"]["rupture_matching_eval"]["val"]

    mag_dist_plot_str = plot_rup_match_mag_dist(
        rup_match_results["matched_rups"],
        input_data["eq_gdf"],
    )

    rup_match_map = plot_rup_match_map(
        input_data["eq_gdf"],
        rup_match_results["matched_rups"],
        rup_match_results["unmatched_eqs"],
        map_epsg=map_epsg,
        return_str=True,
    )

    if len(rup_match_results["unmatched_eqs"]) > 0:
        unmatched_eq_table_str = rup_match_results["unmatched_eqs"].to_html()
    else:
        unmatched_eq_table_str = "None"

    results["gem"]["rupture_matching_eval"]["rendered_text"] = (
        rup_match_env.render(
            res=rup_match_results,
            mag_dist_plot_str=mag_dist_plot_str,
            unmatched_eq_table_str=unmatched_eq_table_str,
            map_str=rup_match_map,
        )
    )


def render_mfd_eval(env: Environment, cfg: dict, results: dict):

    test_config = cfg["config"]["model_framework"]["gem"]["model_mfd"]
    mfd_df = results["gem"]["model_mfd"]["val"]["test_data"]["mfd_df"]

    # t_yrs = test_config.get("investigation_time", 1.0)
    # if t_yrs is None:
    #    t_yrs = 1.0

    results["gem"]["model_mfd"]["val"]["mfd_plot"] = plot_mfd(
        model=mfd_df["mod_mfd_cum"].to_dict(),
        observed=mfd_df["obs_mfd_cum"].to_dict(),
        t_yrs=1.0,
        return_fig=False,
        return_string=True,
    )

    mfd_template = env.get_template("mfd.html")
    results["gem"]["model_mfd"]["rendered_text"] = mfd_template.render(
        cfg=cfg, results=results
    )


#####
# old
#####


def render_N_test_old(env: Environment, cfg: dict, results: dict) -> None:
    n_test = env.get_template("n_test.html")
    results["relm"]["N_test"]["rendered_text"] = n_test.render(
        res=results["relm"]["N_test"]["val"]
    )


def render_mfd_old(env: Environment, cfg: dict, results: dict):
    mfd_template = env.get_template("mfd.html")
    results["gem"]["model_mfd"]["rendered_text"] = mfd_template.render(
        cfg=cfg, results=results
    )
